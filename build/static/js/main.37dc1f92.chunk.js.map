{"version":3,"sources":["index.js","../node_modules/express/lib sync","routes.js","controllers/DeliveryController.js","models/Delivery.js"],"names":["express","require","mongoose","cors","routes","app","connect","useNewUrlParser","useUnifiedTopology","use","json","listen","process","PORT","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Router","DeliveryController","get","index","post","store","Delivery","request","response","find","entregas","body","nome","dataEntrega","pontoPartida","pontoDestino","create","delivery","DeliverySchema","Schema","String","Date","model"],"mappings":"uFAAA,IAAMA,EAAUC,EAAQ,IAClBC,EAAWD,EAAQ,KACnBE,EAAOF,EAAQ,KAEfG,EAASH,EAAQ,KAEjBI,EAAML,IAMZE,EAASI,QAAQ,iGAAkG,CAC/GC,iBAAiB,EACjBC,oBAAoB,IAGxBH,EAAII,IAAIN,KAGRE,EAAII,IAAIT,EAAQU,QAIhBL,EAAII,IAAIL,GAIRC,EAAIM,OAAOC,mIAAYC,MAAQ,O,sHC5B/B,SAASC,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,oQCRzB,IAAQC,EAAWvB,EAAQ,IAAnBuB,OACFC,EAAqBxB,EAAQ,KAE7BG,EAASoB,IAEfpB,EAAOsB,IAAI,YAAaD,EAAmBE,OAC3CvB,EAAOwB,KAAK,YAAaH,EAAmBI,OAE5CR,EAAOC,QAAUlB,G,iFCRX0B,EAAW7B,EAAQ,KAEzBoB,EAAOC,QAAU,CAIPK,MAJO,SAIAI,EAASC,GAAW,OAAD,0HACLF,EAASG,OADJ,cACtBC,EADsB,yBAGrBF,EAAStB,KAAKwB,IAHO,8CAQ1BL,MAZO,SAYDE,EAASC,GAAW,OAAD,2HAE+BD,EAAQI,KAA1DC,EAFmB,EAEnBA,KAAMC,EAFa,EAEbA,YAAaC,EAFA,EAEAA,aAAcC,EAFd,EAEcA,aAFd,SAGVT,EAASU,OAAO,CAC7BJ,OACAC,cACAC,eACAC,iBAPuB,cAG3BE,SAH2B,yBAUpBT,EAAStB,KAAK+B,WAVM,gD,0CCdnC,IAAMvC,EAAWD,EAAQ,KAEnByC,EAAiB,IAAIxC,EAASyC,OAAO,CACvCP,KAAMQ,OACNP,YAAaQ,KACbP,aAAcM,OACdL,aAAcK,SAGlBvB,EAAOC,QAAUpB,EAAS4C,MAAM,WAAYJ,K","file":"static/js/main.37dc1f92.chunk.js","sourcesContent":["const express = require('express');\nconst mongoose = require('mongoose');\nconst cors = require('cors');\n\nconst routes = require('./routes');\n\nconst app = express();\n\n\n\n\n//iniciando o banco de dados\nmongoose.connect('mongodb+srv://denilson:denilson@cluster0.gztxb.mongodb.net/desafio?retryWrites=true&w=majority', {\n    useNewUrlParser: true,\n    useUnifiedTopology: true,\n});\n\napp.use(cors());\n\n//validando requisições em Json\napp.use(express.json());\n\n\n\napp.use(routes);\n\n\n\napp.listen(process.env.PORT || 3333);","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 234;","const { Router } = require('express');\nconst DeliveryController = require('./controllers/DeliveryController.js');\n\nconst routes = Router();\n\nroutes.get('/entregas', DeliveryController.index);\nroutes.post('/cadastro', DeliveryController.store);\n\nmodule.exports = routes;\n","const Delivery = require('../models/Delivery');\n\nmodule.exports = {\n  \n  //Listar todas as entregas\n    \n    async index( request, response) {\n        const entregas = await Delivery.find();\n\n        return response.json(entregas);\n    },\n  \n  \n  \n    async store(request, response) {\n      \n        const { nome, dataEntrega, pontoPartida, pontoDestino } = request.body;\n        delivery = await Delivery.create({\n            nome,\n            dataEntrega,\n            pontoPartida,\n            pontoDestino,\n        });\n\n        return response.json(delivery);\n  }\n}","const mongoose = require('mongoose');\n\nconst DeliverySchema = new mongoose.Schema({\n    nome: String,\n    dataEntrega: Date,\n    pontoPartida: String,\n    pontoDestino: String,\n});\n\nmodule.exports = mongoose.model('Delivery', DeliverySchema);"],"sourceRoot":""}